# Antelope Foreground and foreground interface

==========
Sat Oct 17 21:28:29 -0700 2020

How DO we want to define the new fragment interface? it's critical (really all there is) to the EPA model

and where else do we use it?
the google spreadsheet read was always a hack-- what did it use?

	_grab_model_flows
	_process_flow_properties
	_grab_model_frags
    _terminate_model_frags
	
and that was all `new_fragment` and `find_term` (and the fragment interface itself). 

the problem is identifying the parent- and that's not hard, it's just the process. so you need to make a fragment for
each process, and terminate it to the process- so you need to assign its external ref - which is done by observing it.

unless `new_fragment` supports external ref assignment, which it must

yes it does

so we can't name it the same as the process external_ref- it has to be frag-extref

fine. ok, which frags do we build?  we enumerate consumers of a process, how about 'models' which are processes with no
consumers.

easy enough to do on the back end

What else do we have on the fg implementation?

```
// catalog access
get_local
find_term
save

// reimplement locally
count
flows
get_canonical
#context?

// create entities
new_quantity
new_flow
add_or_retrieve(ext_ref, reference, name, ...)

// create fragments
new_fragment
create_process_model
fragment_from_exchanges
clone_fragment

// modify fragments
observe
-extend_process
split_subfragmeent

// retrieve foreground content
fragments
observed_flows
fragments_with_flow
traverse

// fragment management
delete_fragment
clear_unit_scores
clear_scenarios
```

Really, there are post, put, patch, and delete situations here

the fragment itself is an entity with a parent.  I should not be putting, only posting and patching. because user's past
changes would otherwise be lost.

AAaaanyway, there is the important question about creating new fragments versus revising existing ones.  

Revisions should be unitary.  each operation is separate and independent, even if they are received in one PATCH request.

changing exchange values is `observe`, everything else is setting properties, which is POST.

Google: 
 - sets flow if external refs differ
 - updates PARENT
 - sets balance
 - updates Name, StageName, Comment

 - observes the flow
 - sets the termination --- which should maybe ALSO be an observation?


`frag.terminate` is different from `flow.terminate`

`flow.terminate` should be abandoned.  It should instead be `targets`, as it is in the paper I think.

ok, the summary of this is that everything is FINE.  What google's doing is what an implementation should do- this is
just interpreting a POST, in the form of dicts read from excel sheets- effectively JSON


==========
Sun Dec 27 12:41:39 -0800 2020

Here is the issue for terminations: eliminate the notion of background terminations altogether, and assume it by
default.  Change the way cutoffs are handled to maintain consistency.  and develop TESTS.

Motivation: the background / foreground distinction (which is fundamental to antelope) relies on fragments being
identically the foreground, and processes the background. This was belied by implementation decisions, such as the
idea of having bulk-replaceable background terminations by making them reference fragments, all the way back to
CalRecycle.  There a fragment whose only node is a background-terminated process gets interpreted as a directly-
connected background fragment, just as a shortcut (fragments.py where term_is_bg is referenced).  And this is a nice
summarization, I suppose-- although this could be achieved by other means-- but the point is that it is a true
foreground term (being terminated to a fragment) being treated like a background term.

In other cases, foreground terminations (i.e. to fragment) are treated as foreground-- forwarding out their cutoffs
and internalizing their interior nodes via descend or non-descend-- and process terminations are unevenly treated.
is_background is only used in sorting / displaying / selecting fragments- and during traversal, only to arrest
traversal (but that should be implicit with the child flows!)

When we get to non-cutoff non-"background" fragments, there are only two possibilities: traverse_fg_node and
traverse_subfragment.  I argue the is_background case is null, and that's in fact a fg node.

there we've got some problems with auto-consumption (for which the solution is to model as a sub-fragment where it's
already handled) but other than that it's pretty straightforward.  It ignores process exchanges and computes node
balances, but only for explicit flows.

The point is, when a node terminated to a process is traversed, the process's inventory is ignored ANYWAY.  The only
call to the process inventory is from the termination, to compute unit scores, using unobserved exchanges.  THIS
SHOULD BE A BACKGROUND PROCESS.

The gaps are: the aforementioned balance computation for incompletely represented processes, and the forwarding of
cutoff flows.  Both of which were afterthoughts already.

The CORRECT way forward is to treat all processes as background processes, EXCEPT for flows explicitly observed in the
foreground. In other words, to universalize the unobserved_exchanges operation.  Balance values should not be computed
(and should even raise an error) if attempted on nodes with background terminations-- and correctly naming ALL process
terminations to be background terminations highlights the incoherence in the present approach.  Any processes that are
to be treated as foreground processes should simply have all their flows represented as child fragments, i.e.
"observed."

If a particular process doesn't HAVE a background implementation------ then if it has an inventory and index
implementation the catalog will compute one- and if not, then the lcia should be done in the foreground with
intermediate flows logged as cutoffs in the LciaResult.  And LciaResults need a way to group + list all their
cutoffs.

Anyhow, this is a major rewrite.  The tests alone will take a week of dedicated work, and that will have to come after
this other stuff is wrapped.  And we should get CalRecycle tested first, to ensure the rewrite doesn't break existing
stuff.

But thereafter the termination no longer needs to distinguish between background and foreground!

==========
Sat Mar 06 14:55:26 -0800 2021

Currently debugging a problem involving overly-permissive subfragment traversal.  Basically, a foreground flow specified in m3 of natural gas is using a background process specified in MJ of natural gas, without a unit conversion.

- Question 0, why did the problem occur, is answered: "fragment_from_exchanges" automatically passes exchange flow as term_flow, and FlowTermination uses it uncritically

- Question 1: how do we repair the problem? proximate solution is to not pass term_flows when terminating to fragment (corner case: when we want to back-drive a fragment- but, fairly, that should not necessarily be supported in the default-implicit case)

- Question 2: how do we prevent the problem? The traversal should detect the condition and throw an exception. so: where?

- Question 3: how do we unittest? ans: depends on Q2.

I have a hunch that this is occurring because of the 'term_is_bg' test in _traverse_subfragment... to be validated soon, but first:

 * the situation should not have been allowed to stand, but in order to catch it would have required performing a traversal at the time the termination is constructed (in answering an inventory() call).  Right now the dstance is to (a) continue to allow FlowTerminations to use fragment term_flows uncritically, but (b) change the behavior of fragment_from_exchanges so that exchanges terminated to fragments do not pass term_flows but accept terminations' reference flows.  That would prevent the situation from coming about.

If the situation DID come about, then it should raise a traversal-time error (which argues in favor of testing upon specification). The error comes because the term-flow does not match with the termination.

Let's test the hunch: if the term_is_bg shortcut is the proximate cause, then disabling it should lead to a MissingFlow exception when the subfragment is traversed.

OK, that test is confirmed.


Remedies:
 (1) we should test consistency between term_flow and term_node.flow in the shortcut case
 (2) failing that test, the code will fall-back to _traverse_subfragment and raise the MissingFlow exception

Next, we change the term_flow setting to test for consistency-- go ahead and run the inventory and look for it, raise MissingFlow

and last, we change the fragment_from_exchanges behavior as noted... and the problem is solved, and the traversal includes a 38MJ/m3 conversion which has already been specified!


==========
Thu Apr 15 12:37:48 -0700 2021

New problem.
Fragments of the following form:


(ref) <---[Flow]-(1.0 kg)---O {conv}
                 [x kg]     |
	                    *<---[V-Flow]-(1.0 m3)---#

Fragment is designed as a unit converter, in this case from a background process whose reference property is volume, to a new reference property which is mass.

Volume-to-mass exchange value is specified by observing the fragment (First error)

When I run conv.fragment_lcia() I am getting the *unit impact score* for the fragment- but the fragment's output is defined by the observed reference flow.

By default, this is a problem when the fragment is traversed un-observed because you wind up with 1kg reference = 1m3 background.  No problem when you run observed because you wind up with the proper xkg reference = 1m3 background.  BUT you have to make sure to interpret the result based on the inventory-- i.e. the fragment unit impact is associated with providing xkg of reference flow. SO: client code modification required to properly internalize the inventory result.

Zero proposed solution: modify the client code to divide by the inventory result.

One proposed solution: nest the unit-conversion fragment inside a wrapper that forces the subfragment traversal to be handled internally. This has been observed to work.

Two proposed solution: mark the background flow a balance flow and establish a flow property. I actually like this a lot better.  HOWEVER: two drawbacks.

1- As currently coded, the reference flow must be characterized in terms of the background flow's property-- it doesn't work vice versa.  This is because _traverse_node() only uses conserved_qty.cf(self.flow) and does not check whether the balance flow is characterized w.r.t. the reference flow's property.  And this is CORRECT because ALL the flows need to be checked w.r.t. the same flow property.  SO: it should be possible to raise at least a warning when the conserved_quantity is set if the flow has not been characterized w.r.t. the conserved quantity.

2- If used in concert with an observed reference exchange- then this still works, and now it works in both the observed and unobserved cases- but the client code still needs to normalize by the inventory amount (which is undesirable).

So, the moral of the story is: when using unit scores of fragments, don't specify non-unit reference exchange values unless you're willing to normalize by inventory results.

And use balance flows- they work.

conclusion: NO code changes required, except add a warning to set_conserved_quantity() to detect zero-valued reference exchanges.

